{
    "Comment": "Invoke Lambda Function Until StatusCode is 200",
    "StartAt": "Check_Queue_Has_Message",
    "States": {
      "Check_Queue_Has_Message": {
        "Type": "Task",
        "Resource": "arn:aws:lambda:ap-northeast-2:487590574852:function:Check_Queue_Has_Message",
        "ResultPath": "$.lambdaResult",
        "Next": "CheckStatusCode"
      },
      "CheckStatusCode": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.lambdaResult.statusCode",
            "NumericEquals": 200,
            "Next": "Create_Rule_If_Queue_Has_Message"
          }
        ],
        "Default": "EndState"
      },
      "Create_Rule_If_Queue_Has_Message": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload.$": "$",
          "FunctionName": "arn:aws:lambda:ap-northeast-2:487590574852:function:Create-Rules-prod-demo:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "WaitBeforeNextInvocation"
      },
      "WaitBeforeNextInvocation": {
        "Type": "Wait",
        "Seconds": 30,
        "Next": "Check_Queue_Has_Message"
      },
      "EndState": {
        "Type": "Pass",
        "Result": "Lambda function returned a non-200 status code. Ending the state machine.",
        "End": true
      }
    }
  }
